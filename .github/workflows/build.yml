name: Build kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      runner:
        description: "Choose runner"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-22.04-local
        default: ubuntu-22.04
      lto_type:
        description: "Choose LTO type (full will not run on basic runners)"
        required: true
        type: choice
        options:
          - full
          - thin
          - none
        default: thin
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Stable
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string  # This input is required if 'Other' is chosen
        default: ""  # Default is empty, but can be filled in if 'Other' is selected

jobs:
  build-ksu-gki:
    uses: ./.github/workflows/main.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-mksu-gki:
    uses: ./.github/workflows/main.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "MKSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-ksu-next-gki:
    uses: ./.github/workflows/main.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU_NEXT"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  release:
    runs-on: ubuntu-latest
    needs:
        - build-ksu-gki
        - build-mksu-gki
        - build-ksu-next-gki
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ukriu
      REPO_NAME: android12_gki_build
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernels With KernelSU & SUSFS"
      RELEASE_NOTES: |
        These kernels are prebuilt with Offical KernelSU/MKSU/KernelSU-Next with SUSFS.
        
        Features:
        [+] KernelSU-${{ inputs.kernelsu_variant }}
        [+] SUSFS à¶ž v1.5.5 
        [+] Wireguard Support
        [+] Simple Maphide for LineageOS Detections
        [+] Futile Maphide for jit-zygote-cache Detections
        [+] Magic Mount Support

        Module: 
        \- https://github.com/sidex15/ksu_module_susfs
        
        Managers:
        \- KernelSU: https://github.com/tiann/KernelSU
        \- 5ec1cff's KernelSU: https://github.com/5ec1cff/KernelSU
        \- KernelSU-Next: https://github.com/rifsxd/KernelSU-Next
        
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Append Commit Hashes & Links to `RELEASE_NOTES` & Append KernelSU-Next Reference to `RELEASE_NOTES`
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "LTO: ${{ inputs.lto_type }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Commit Hashes:" >> $GITHUB_ENV
          echo "SUSFS4KSU:" >> $GITHUB_ENV
          echo "gki-android12-5.10: [$COMMIT_HASH_gki_android12_5_10]($COMMIT_URL_gki_android12_5_10)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      # Get the Latest Tag from GitHub
      - name: Generate and Create New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.5.5-r0"
            fi
            
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
    
            # Output the new tag to be used
            echo "New tag: $NEW_TAG"
    
            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

            # Create the tag in the repository
            git tag $NEW_TAG
            git push origin $NEW_TAG
            
      # Download Artifacts for A12 (Only if A12 Build is successful or input is true or empty)
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag for the release
          prerelease: true  # Mark the release as a pre-release
          release_name: ${{ env.RELEASE_NAME }}  # Pass the RELEASE_NAME to the action
          body: ${{ env.RELEASE_NOTES }}  # Pass the RELEASE_NOTES to the action

      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/*_kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
